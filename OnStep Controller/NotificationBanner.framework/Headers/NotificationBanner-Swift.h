// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NotificationBanner",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum BannerStyle : NSInteger;
@class UIColor;

SWIFT_PROTOCOL("_TtP18NotificationBanner20BannerColorsProtocol_")
@protocol BannerColorsProtocol
- (UIColor * _Nonnull)colorFor:(enum BannerStyle)style SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18NotificationBanner21BannerHapticGenerator")
@interface BannerHapticGenerator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BannerPosition, closed) {
  BannerPositionBottom = 0,
  BannerPositionTop = 1,
};

typedef SWIFT_ENUM(NSInteger, BannerStyle, closed) {
  BannerStyleDanger = 0,
  BannerStyleInfo = 1,
  BannerStyleNone = 2,
  BannerStyleSuccess = 3,
  BannerStyleWarning = 4,
};

@class UILabel;
@class NotificationBannerQueue;
@class NSCoder;
enum QueuePosition : NSInteger;
@class UIViewController;

SWIFT_CLASS("_TtC18NotificationBanner22BaseNotificationBanner")
@interface BaseNotificationBanner : UIView
/// Notification that will be posted when a notification banner will appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerWillAppear;)
+ (NSNotificationName _Nonnull)BannerWillAppear SWIFT_WARN_UNUSED_RESULT;
/// Notification that will be posted when a notification banner did appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerDidAppear;)
+ (NSNotificationName _Nonnull)BannerDidAppear SWIFT_WARN_UNUSED_RESULT;
/// Notification that will be posted when a notification banner will appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerWillDisappear;)
+ (NSNotificationName _Nonnull)BannerWillDisappear SWIFT_WARN_UNUSED_RESULT;
/// Notification that will be posted when a notification banner did appear
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull BannerDidDisappear;)
+ (NSNotificationName _Nonnull)BannerDidDisappear SWIFT_WARN_UNUSED_RESULT;
/// Notification banner object key that is included with each Notification
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BannerObjectKey;)
+ (NSString * _Nonnull)BannerObjectKey SWIFT_WARN_UNUSED_RESULT;
/// The height of the banner when it is presented
@property (nonatomic) CGFloat bannerHeight;
/// The topmost label of the notification if a custom view is not desired
@property (nonatomic, readonly, strong) UILabel * _Nullable titleLabel;
/// The time before the notificaiton is automatically dismissed
@property (nonatomic) NSTimeInterval duration;
/// If false, the banner will not be dismissed until the developer programatically dismisses it
@property (nonatomic) BOOL autoDismiss;
/// If true, notification will dismissed when tapped
@property (nonatomic) BOOL dismissOnTap;
/// If true, notification will dismissed when swiped up
@property (nonatomic) BOOL dismissOnSwipeUp;
/// Closure that will be executed if the notification banner is tapped
@property (nonatomic, copy) void (^ _Nullable onTap)(void);
/// Closure that will be executed if the notification banner is swiped up
@property (nonatomic, copy) void (^ _Nullable onSwipeUp)(void);
/// Responsible for positioning and auto managing notification banners
@property (nonatomic, strong) NotificationBannerQueue * _Nonnull bannerQueue;
/// Banner dimiss animation duration
@property (nonatomic) NSTimeInterval dismissDuration;
/// Wether or not the notification banner is currently being displayed
@property (nonatomic, readonly) BOOL isDisplaying;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Dismisses the NotificationBanner and shows the next one if there is one to show on the queue
- (void)dismiss;
/// Removes the NotificationBanner from the queue if not displaying
- (void)remove;
/// Places a NotificationBanner on the queue and shows it if its the first one in the queue
/// \param queuePosition The position to show the notification banner. If the position is .front, the
/// banner will be displayed immediately
///
/// \param bannerPosition The position the notification banner should slide in from
///
/// \param queue The queue to display the notification banner on. It is up to the developer
/// to manage multiple banner queues and prevent any conflicts that may occur.
///
/// \param viewController The view controller to display the notifification banner on. If nil, it will
/// be placed on the main app window
///
- (void)showWithQueuePosition:(enum QueuePosition)queuePosition bannerPosition:(enum BannerPosition)bannerPosition queue:(NotificationBannerQueue * _Nonnull)queue on:(UIViewController * _Nullable)viewController;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC18NotificationBanner25GrowingNotificationBanner")
@interface GrowingNotificationBanner : BaseNotificationBanner
/// The height of the banner when it is presented
@property (nonatomic) CGFloat bannerHeight;
/// The bottom most label of the notification if a subtitle is provided
@property (nonatomic, readonly, strong) UILabel * _Nullable subtitleLabel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class MarqueeLabel;
@class NSAttributedString;

SWIFT_CLASS("_TtC18NotificationBanner18NotificationBanner")
@interface NotificationBanner : BaseNotificationBanner
/// The bottom most label of the notification if a subtitle is provided
@property (nonatomic, readonly, strong) MarqueeLabel * _Nullable subtitleLabel;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle leftView:(UIView * _Nullable)leftView rightView:(UIView * _Nullable)rightView style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAttributedTitle:(NSAttributedString * _Nonnull)attributedTitle attributedSubtitle:(NSAttributedString * _Nullable)attributedSubtitle leftView:(UIView * _Nullable)leftView rightView:(UIView * _Nullable)rightView style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors;
- (nonnull instancetype)initWithCustomView:(UIView * _Nonnull)customView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18NotificationBanner23NotificationBannerQueue")
@interface NotificationBannerQueue : NSObject
/// The default instance of the NotificationBannerQueue
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) NotificationBannerQueue * _Nonnull default_;)
+ (NotificationBannerQueue * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// The current number of notification banners on the queue
@property (nonatomic, readonly) NSInteger numberOfBanners;
/// Removes all notification banners from the queue
- (void)removeAll;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, QueuePosition, closed) {
  QueuePositionBack = 0,
  QueuePositionFront = 1,
};


SWIFT_CLASS("_TtC18NotificationBanner27StatusBarNotificationBanner")
@interface StatusBarNotificationBanner : BaseNotificationBanner
@property (nonatomic) CGFloat bannerHeight;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors;
- (nonnull instancetype)initWithAttributedTitle:(NSAttributedString * _Nonnull)attributedTitle style:(enum BannerStyle)style colors:(id <BannerColorsProtocol> _Nullable)colors;
- (nonnull instancetype)initWithCustomView:(UIView * _Nonnull)customView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
